// Code generated by MockGen. DO NOT EDIT.
// Source: graphql/contracts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	graphql "github.com/threefoldtech/tfgrid-sdk-go/grid-client/graphql"
)

// MockContractsGetterI is a mock of ContractsGetterI interface.
type MockContractsGetterI struct {
	ctrl     *gomock.Controller
	recorder *MockContractsGetterIMockRecorder
}

// MockContractsGetterIMockRecorder is the mock recorder for MockContractsGetterI.
type MockContractsGetterIMockRecorder struct {
	mock *MockContractsGetterI
}

// NewMockContractsGetterI creates a new mock instance.
func NewMockContractsGetterI(ctrl *gomock.Controller) *MockContractsGetterI {
	mock := &MockContractsGetterI{ctrl: ctrl}
	mock.recorder = &MockContractsGetterIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractsGetterI) EXPECT() *MockContractsGetterIMockRecorder {
	return m.recorder
}

// GetContractByID mocks base method.
func (m *MockContractsGetterI) GetContractByID(contractID string, noGateways ...bool) (graphql.Contracts, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{contractID}
	for _, a := range noGateways {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContractByID", varargs...)
	ret0, _ := ret[0].(graphql.Contracts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractByID indicates an expected call of GetContractByID.
func (mr *MockContractsGetterIMockRecorder) GetContractByID(contractID interface{}, noGateways ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{contractID}, noGateways...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractByID", reflect.TypeOf((*MockContractsGetterI)(nil).GetContractByID), varargs...)
}

// GetNodeContractsByTypeAndName mocks base method.
func (m *MockContractsGetterI) GetNodeContractsByTypeAndName(projectName, deploymentType, deploymentName string) (map[uint32]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeContractsByTypeAndName", projectName, deploymentType, deploymentName)
	ret0, _ := ret[0].(map[uint32]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeContractsByTypeAndName indicates an expected call of GetNodeContractsByTypeAndName.
func (mr *MockContractsGetterIMockRecorder) GetNodeContractsByTypeAndName(projectName, deploymentType, deploymentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeContractsByTypeAndName", reflect.TypeOf((*MockContractsGetterI)(nil).GetNodeContractsByTypeAndName), projectName, deploymentType, deploymentName)
}

// ListContractsByTwinID mocks base method.
func (m *MockContractsGetterI) ListContractsByTwinID(states []string) (graphql.Contracts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContractsByTwinID", states)
	ret0, _ := ret[0].(graphql.Contracts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContractsByTwinID indicates an expected call of ListContractsByTwinID.
func (mr *MockContractsGetterIMockRecorder) ListContractsByTwinID(states interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContractsByTwinID", reflect.TypeOf((*MockContractsGetterI)(nil).ListContractsByTwinID), states)
}

// ListContractsOfProjectName mocks base method.
func (m *MockContractsGetterI) ListContractsOfProjectName(projectName string, noGateways ...bool) (graphql.Contracts, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectName}
	for _, a := range noGateways {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContractsOfProjectName", varargs...)
	ret0, _ := ret[0].(graphql.Contracts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContractsOfProjectName indicates an expected call of ListContractsOfProjectName.
func (mr *MockContractsGetterIMockRecorder) ListContractsOfProjectName(projectName interface{}, noGateways ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectName}, noGateways...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContractsOfProjectName", reflect.TypeOf((*MockContractsGetterI)(nil).ListContractsOfProjectName), varargs...)
}
